#!/usr/bin/env python3

import argparse
import logging
import sys
import traceback

from logging import FileHandler  # 从 logging 模块导入 FileHandler，用于日志文件记录
from .text2chakra_converter import Text2ChakraConverter  # 导入 Text2ChakraConverter 处理 Text 格式输入
from .flexflow2chakra_converter import FlexFlow2ChakraConverter  # 导入 FlexFlow2ChakraConverter 处理 FlexFlow 格式输入
from .pytorch2chakra_converter import PyTorch2ChakraConverter  # 导入 PyTorch2ChakraConverter 处理 PyTorch 格式输入

def get_logger(log_filename: str) -> logging.Logger:
    """
    配置日志记录器：
    - 记录到文件（DEBUG 级别）
    - 记录到标准输出（WARNING 及以上）
    """
    formatter = logging.Formatter(
            "%(levelname)s [%(asctime)s] %(message)s",  # 日志格式，包含日志级别、时间戳和消息
            datefmt="%m/%d/%Y %I:%M:%S %p") # 日期时间格式（MM/DD/YYYY HH:MM:SS AM/PM）

    file_handler = FileHandler(log_filename, mode="w") # 创建日志文件处理器，以写入模式打开文件
    file_handler.setLevel(logging.DEBUG) # 设置文件日志级别为 DEBUG
    file_handler.setFormatter(formatter) # 应用日志格式

    stream_handler = logging.StreamHandler() # 创建标准输出日志处理器
    stream_handler.setLevel(logging.WARNING) # 设置标准输出日志级别为 WARNING
    stream_handler.setFormatter(formatter) # 应用日志格式

    logger = logging.getLogger(__file__)  # 获取当前文件的日志记录器
    logger.setLevel(logging.DEBUG)  # 设置日志记录器级别为 DEBUG
    logger.addHandler(file_handler)  # 添加文件日志处理器
    logger.addHandler(stream_handler)  # 添加标准输出日志处理器

    return logger

def main() -> None:
    parser = argparse.ArgumentParser(
            description="Execution Trace Converter" # 命令行工具的描述信息
    )
    parser.add_argument(
            "--input_type",
            type=str,
            default=None,
            required=True,
            help="Input execution trace type"  # 指定输入类型（Text、FlexFlow 或 PyTorch）
    )
    parser.add_argument(
            "--input_filename",
            type=str,
            default=None,
            required=True,
            help="Input execution trace filename" # 指定输入文件名
    )
    parser.add_argument(
            "--output_filename",
            type=str,
            default=None,
            required=True,
            help="Output Chakra execution trace filename" # 指定输出文件名
    )
    parser.add_argument(
            "--num_dims",
            type=int,
            default=None,
            required=True,
            help="Number of dimensions in the network topology" # 指定网络拓扑的维度数
    )
    parser.add_argument(
            "--num_npus",
            type=int,
            default=None,
            required="Text" in sys.argv,
            help="Number of NPUs in a system" # 指定系统中的 NPU 数量（仅对 Text 格式输入必需）
    )
    parser.add_argument(
            "--num_passes",
            type=int,
            default=None,
            required="Text" in sys.argv,
            help="Number of training passes" # 指定训练的轮数（仅对 Text 格式输入必需）
    )
    parser.add_argument(
            "--npu_frequency",
            type=int,
            default=None,
            required="FlexFlow" in sys.argv,
            help="NPU frequency in MHz" # 指定 NPU 频率（仅对 FlexFlow 格式输入必需）
    )
    parser.add_argument(
            "--log_filename",
            type=str,
            default="debug.log",
            help="Log filename"  # 指定日志文件名称，默认为 "debug.log"
    )
    args = parser.parse_args()  # 解析命令行参数

    logger = get_logger(args.log_filename)
    logger.debug(" ".join(sys.argv)) # 记录命令行输入的所有参数

    try:
        # 根据 input_type 选择相应的转换器并执行转换
        if args.input_type == "Text":
            converter = Text2ChakraConverter(
                    args.input_filename,
                    args.output_filename,
                    args.num_dims,
                    args.num_npus,
                    args.num_passes,
                    logger)
            converter.convert()
        elif args.input_type == "FlexFlow":
            converter = FlexFlow2ChakraConverter(
                    args.input_filename,
                    args.output_filename,
                    args.num_dims,
                    args.npu_frequency,
                    logger)
            converter.convert()
        elif args.input_type == "PyTorch":
            converter = PyTorch2ChakraConverter(
                    args.input_filename,
                    args.output_filename,
                    args.num_dims,
                    logger)
            converter.convert()
        else:
            logger.error(f"{args.input_type} unsupported")
            sys.exit(1)
    except Exception as e:
        traceback.print_exc() # 打印异常信息
        logger.debug(traceback.format_exc()) # 记录异常信息到日志
        sys.exit(1)

if __name__ == "__main__":
    main()
